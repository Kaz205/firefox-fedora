diff --git a/widget/gtk/GtkCompositorWidget.cpp b/widget/gtk/GtkCompositorWidget.cpp
--- a/widget/gtk/GtkCompositorWidget.cpp
+++ b/widget/gtk/GtkCompositorWidget.cpp
@@ -19,13 +19,14 @@
 #  include "mozilla/layers/NativeLayerWayland.h"
 #endif
 
 #ifdef MOZ_LOGGING
 #  undef LOG
-#  define LOG(...)                                    \
+#  define LOG(str, ...)                               \
     MOZ_LOG(IsPopup() ? gWidgetPopupLog : gWidgetLog, \
-            mozilla::LogLevel::Debug, (__VA_ARGS__))
+            mozilla::LogLevel::Debug,                 \
+            ("[%p]: " str, mWidget.get(), ##__VA_ARGS__))
 #endif /* MOZ_LOGGING */
 
 namespace mozilla {
 namespace widget {
 
@@ -92,10 +93,13 @@
 
 nsIWidget* GtkCompositorWidget::RealWidget() { return mWidget; }
 
 void GtkCompositorWidget::NotifyClientSizeChanged(
     const LayoutDeviceIntSize& aClientSize) {
+  LOG("GtkCompositorWidget::NotifyClientSizeChanged() to %d x %d",
+      aClientSize.width, aClientSize.height);
+
   auto size = mClientSize.Lock();
   *size = aClientSize;
 }
 
 LayoutDeviceIntSize GtkCompositorWidget::GetClientSize() {
@@ -107,14 +111,19 @@
     const LayoutDeviceRect& aSize) {
   if (!mWidget || !mWidget->IsWaitingForCompositorResume()) {
     return;
   }
 
+  LOG("GtkCompositorWidget::RemoteLayoutSizeUpdated() %d x %d",
+      (int)aSize.width, (int)aSize.height);
+
   // We're waiting for layout to match widget size.
   auto clientSize = mClientSize.Lock();
   if (clientSize->width != (int)aSize.width ||
       clientSize->height != (int)aSize.height) {
+    LOG("quit, client size doesn't match (%d x %d)", clientSize->width,
+        clientSize->height);
     return;
   }
 
   mWidget->ResumeCompositorFromCompositorThread();
 }

